name: update requirements and clean unused images

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
jobs:
  unused-images:
    runs-on: ubuntu-latest
    outputs:
      workflow-type: ${{ steps.check-env.outputs.WORKFLOW_TYPE }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - name: Get .env file
        uses: xom9ikk/dotenv@v2.1.0
        with:
          path: .github
          load_mode: strict
      - name: Outputs environment
        id: check-env
        run: |
          echo "WORKFLOW_TYPE=${{ env.WORKFLOW_TYPE }}" >> $GITHUB_OUTPUT
      - name: Clean unused images
        if: ${{ env.CLEAN == 'true' && env.DRY_RUN == 'false' }}
        continue-on-error: true
        run: |
          python find_unused_media.py "$IMG_DIR"
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@users.noreply.github.com'
          git commit -am "[skip ci] Remove unused media"
          git push
      - name: Clean unused images (dry run)
        if: ${{ env.CLEAN == 'true' && env.DRY_RUN == 'true' }}
        run: |
          python find_unused_media.py "$IMG_DIR" --dry-run
  other:
    needs: unused-images
    runs-on: ubuntu-latest
    if: needs.unused-images.outputs.workflow-type != 'gh-pages'
    steps: 
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Update requirements
        run: |
          pip install pur
          isExist=false
          if [ -f "requirements_actions.txt" ]; then
            pur -r requirements_actions.txt
            isExist=true
          fi
          pur -r requirements.txt --skip obsidiantools
          echo "REQUIREMENTSACTIONS=$isExist" >> $GITHUB_ENV
      - name: Push updated requirements
        continue-on-error: true
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@users.noreply.github.com'
          git commit -am "[AUTO] Update requirements"
          git push
      - name: Check cache
        if: env.REQUIREMENTSACTIONS == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: venv-other
          key: pip-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements_actions.txt') }}
      - if: steps.cache.outputs.cache-hit != 'true' && env.REQUIREMENTSACTIONS == 'true'
        name: Recreate cache
        run: |
          if [ -d "venv-other" ]; then rm -rf venv-other; fi
          python3 -m venv venv-other
          source venv-other/bin/activate
          pip install -r requirements_actions.txt
  gh-pages:
    needs: unused-images
    runs-on: ubuntu-latest
    if: needs.unused-images.outputs.workflow-type == 'gh-pages'
    steps: 
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Update requirements
        run: |
          pip install pur
          pur -r requirements.txt
      - name: Check cache
        id: cache
        uses: actions/cache@v3
        with:
          path: venv
          key: pip-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
      - if: steps.cache.outputs.cache-hit != 'true'
        name: Recreate cache
        run: |
          if [ -d "venv" ]; then rm -rf venv; fi
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
      - name: Push updated requirements
        continue-on-error: true
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@users.noreply.github.com'
          git commit -am "[AUTO] Update requirements"
          git push